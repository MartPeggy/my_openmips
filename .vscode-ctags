!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	d:/Code/my_OpenMIPS/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20220306.0/
AluOpBus	./defines.v	/^`define AluOpBus        7:0             \/\/ 译码阶段的输出 aluop_o 的宽度$/;"	c
AluSelBus	./defines.v	/^`define AluSelBus       2:0             \/\/ 译码阶段的输出 alusel_o的宽度$/;"	c
Branch	./defines.v	/^`define Branch          1'b1$/;"	c
CLOCK_50	./openmips_min_sopc_tb.v	/^reg CLOCK_50;$/;"	r	module:openmips_min_sopc_tb
ChipDisable	./defines.v	/^`define ChipDisable     1'b0            \/\/ 芯片禁止$/;"	c
ChipEnable	./defines.v	/^`define ChipEnable      1'b1            \/\/ 芯片使能$/;"	c
DoubleRegBus	./defines.v	/^`define DoubleRegBus     63:0    \/\/ 通用寄存器的数据线宽度的两倍$/;"	c
DoubleRegWidth	./defines.v	/^`define DoubleRegWidth   64      \/\/ 通用寄存器的两倍宽度$/;"	c
EXE_AND	./defines.v	/^`define EXE_AND             6'b100100       \/\/ AND$/;"	c
EXE_ANDI	./defines.v	/^`define EXE_ANDI            6'b001100       \/\/ ANDI 寄存器+立即数 进行与运算$/;"	c
EXE_ANDI_OP	./defines.v	/^`define EXE_ANDI_OP      8'b01011001$/;"	c
EXE_AND_OP	./defines.v	/^`define EXE_AND_OP       8'b00100100$/;"	c
EXE_LUI	./defines.v	/^`define EXE_LUI             6'b001111       \/\/ LUI  立即数保存到寄存器高16位$/;"	c
EXE_LUI_OP	./defines.v	/^`define EXE_LUI_OP       8'b01011100$/;"	c
EXE_NOP	./defines.v	/^`define EXE_NOP             6'b000000       \/\/ NOP$/;"	c
EXE_NOP_OP	./defines.v	/^`define EXE_NOP_OP       8'b00000000$/;"	c
EXE_NOR	./defines.v	/^`define EXE_NOR             6'b100111       \/\/ NOR 非或$/;"	c
EXE_NOR_OP	./defines.v	/^`define EXE_NOR_OP       8'b00100111$/;"	c
EXE_OR	./defines.v	/^`define EXE_OR              6'b100101       \/\/ OR$/;"	c
EXE_ORI	./defines.v	/^`define EXE_ORI             6'b001101       \/\/ ORI$/;"	c
EXE_ORI_OP	./defines.v	/^`define EXE_ORI_OP       8'b01011010$/;"	c
EXE_OR_OP	./defines.v	/^`define EXE_OR_OP        8'b00100101$/;"	c
EXE_PREF	./defines.v	/^`define EXE_PREF            6'b110011       \/\/ PREF 这里相当于空指令$/;"	c
EXE_REGIMM_INST	./defines.v	/^`define EXE_REGIMM_INST     6'b000001$/;"	c
EXE_RES_LOGIC	./defines.v	/^`define EXE_RES_LOGIC   3'b001$/;"	c
EXE_RES_NOP	./defines.v	/^`define EXE_RES_NOP     3'b000$/;"	c
EXE_RES_SHIFT	./defines.v	/^`define EXE_RES_SHIFT   3'b010$/;"	c
EXE_SLL	./defines.v	/^`define EXE_SLL             6'b000000       \/\/ SLL 寄存器中的值左移并把结果保存到/;"	c
EXE_SLLV	./defines.v	/^`define EXE_SLLV            6'b000100       \/\/ SLLV 寄存器中的值左移并把结果保存/;"	c
EXE_SLLV_OP	./defines.v	/^`define EXE_SLLV_OP      8'b00000100$/;"	c
EXE_SLL_OP	./defines.v	/^`define EXE_SLL_OP       8'b01111100$/;"	c
EXE_SPECIAL2_INST	./defines.v	/^`define EXE_SPECIAL2_INST   6'b01110$/;"	c
EXE_SPECIAL_INST	./defines.v	/^`define EXE_SPECIAL_INST    6'b000000       \/\/ 特殊指令$/;"	c
EXE_SRA	./defines.v	/^`define EXE_SRA             6'b000011       \/\/ SRA 寄存器中的值进行算术右移并把结/;"	c
EXE_SRAV	./defines.v	/^`define EXE_SRAV            6'b000111       \/\/ SRAV 寄存器中的值进行算术右移并把/;"	c
EXE_SRAV_OP	./defines.v	/^`define EXE_SRAV_OP      8'b00000111$/;"	c
EXE_SRA_OP	./defines.v	/^`define EXE_SRA_OP       8'b00000011$/;"	c
EXE_SRL	./defines.v	/^`define EXE_SRL             6'b000010       \/\/ SRL 寄存器中的值右移并把结果保存到/;"	c
EXE_SRLV	./defines.v	/^`define EXE_SRLV            6'b000110       \/\/ SRLV 寄存器中的值右移并把结果保存/;"	c
EXE_SRLV_OP	./defines.v	/^`define EXE_SRLV_OP      8'b00000110$/;"	c
EXE_SRL_OP	./defines.v	/^`define EXE_SRL_OP       8'b00000010$/;"	c
EXE_SYNC	./defines.v	/^`define EXE_SYNC            6'b001111       \/\/ SYNC 这里相当于空指令$/;"	c
EXE_XOR	./defines.v	/^`define EXE_XOR             6'b100110       \/\/ XOR 异或$/;"	c
EXE_XORI	./defines.v	/^`define EXE_XORI            6'b001110       \/\/ XORI 寄存器+立即数 进行异或运算$/;"	c
EXE_XORI_OP	./defines.v	/^`define EXE_XORI_OP      8'b01011011$/;"	c
EXE_XOR_OP	./defines.v	/^`define EXE_XOR_OP       8'b00100110$/;"	c
False_v	./defines.v	/^`define False_v         1'b0            \/\/ 逻辑假$/;"	c
InDelaySlot	./defines.v	/^`define InDelaySlot     1'b1$/;"	c
InstAddrBus	./defines.v	/^`define InstAddrBus      31:0    \/\/ ROM的地址总线宽度$/;"	c
InstBus	./defines.v	/^`define InstBus          31:0    \/\/ ROM的数据总线宽度$/;"	c
InstInvalid	./defines.v	/^`define InstInvalid     1'b1            \/\/ 指令无效$/;"	c
InstMemNum	./defines.v	/^`define InstMemNum       131071  \/\/ ROM的实际大小$/;"	c
InstMemNumLog2	./defines.v	/^`define InstMemNumLog2   17      \/\/ ROM实际使用的地址线宽度$/;"	c
InstValid	./defines.v	/^`define InstValid       1'b0            \/\/ 指令有效$/;"	c
InterruptAssert	./defines.v	/^`define InterruptAssert 1'b1$/;"	c
InterruptNotAssert	./defines.v	/^`define InterruptNotAssert 1'b0$/;"	c
NOPRegAddr	./defines.v	/^`define NOPRegAddr       5'b000000$/;"	c
NoStop	./defines.v	/^`define NoStop          1'b0$/;"	c
NotBranch	./defines.v	/^`define NotBranch       1'b0$/;"	c
NotInDelaySlot	./defines.v	/^`define NotInDelaySlot  1'b0$/;"	c
ReadDisable	./defines.v	/^`define ReadDisable     1'b0            \/\/ 禁止读$/;"	c
ReadEnable	./defines.v	/^`define ReadEnable      1'b1            \/\/ 读使能$/;"	c
RegAddrBus	./defines.v	/^`define RegAddrBus       4:0     \/\/ RegFile的地址线宽度$/;"	c
RegBus	./defines.v	/^`define RegBus           31:0    \/\/ RegFile的数据线宽度$/;"	c
RegNum	./defines.v	/^`define RegNum           32      \/\/ 通用寄存器的数量$/;"	c
RegNumLog2	./defines.v	/^`define RegNumLog2       5       \/\/ 寻址通用寄存器使用的地址位宽$/;"	c
RegWidth	./defines.v	/^`define RegWidth         32      \/\/ 通用寄存器的宽度$/;"	c
RstDisable	./defines.v	/^`define RstDisable      1'b0            \/\/ 复位无效$/;"	c
RstEnable	./defines.v	/^`define RstEnable       1'b1            \/\/ 复位有效$/;"	c
SSNOP	./defines.v	/^`define SSNOP               32'b00000000000000000000000001000000$/;"	c
Stop	./defines.v	/^`define Stop            1'b1$/;"	c
TrapAssert	./defines.v	/^`define TrapAssert      1'b1$/;"	c
TrapNotAssert	./defines.v	/^`define TrapNotAssert   1'b0$/;"	c
True_v	./defines.v	/^`define True_v          1'b1            \/\/ 逻辑真$/;"	c
WriteDisable	./defines.v	/^`define WriteDisable    1'b0            \/\/ 禁止写$/;"	c
WriteEnable	./defines.v	/^`define WriteEnable     1'b1            \/\/ 写使能$/;"	c
ZeroWord	./defines.v	/^`define ZeroWord        32'h00000000    \/\/ 32位的数值0$/;"	c
addr	./inst_rom.v	/^           input wire [ `InstAddrBus ] addr,$/;"	p	module:inst_rom
aluop_i	./ex.v	/^           input wire [ `AluOpBus ] aluop_i,$/;"	p	module:ex
aluop_o	./id.v	/^           output reg [ `AluOpBus ] aluop_o,$/;"	p	module:id
alusel_i	./ex.v	/^           input wire [ `AluSelBus ] alusel_i,$/;"	p	module:ex
alusel_o	./id.v	/^           output reg [ `AluSelBus ] alusel_o,$/;"	p	module:id
ce	./inst_rom.v	/^           input wire ce,$/;"	p	module:inst_rom
ce	./pc_reg.v	/^           output reg ce$/;"	p	module:pc_reg
clk	./ex_mem.v	/^           input wire clk,$/;"	p	module:ex_mem
clk	./id_ex.v	/^           input wire clk,$/;"	p	module:id_ex
clk	./if_fd.v	/^           input wire                  clk,$/;"	p	module:if_fd
clk	./mem_wb.v	/^           input wire clk,$/;"	p	module:mem_wb
clk	./openmips.v	/^           input wire clk,$/;"	p	module:openmips
clk	./openmips_min_sopc.v	/^           input wire clk,$/;"	p	module:openmips_min_sopc
clk	./pc_reg.v	/^           input wire clk,$/;"	p	module:pc_reg
clk	./regfile.v	/^           input wire clk,$/;"	p	module:regfile
ex	./ex.v	/^module ex ($/;"	m
ex0	./openmips.v	/^ex ex0($/;"	i	module:openmips
ex_aluop	./id_ex.v	/^           output reg [ `AluOpBus   ] ex_aluop,$/;"	p	module:id_ex
ex_aluop_i	./openmips.v	/^wire[ `AluOpBus ] ex_aluop_i;$/;"	n	module:openmips
ex_alusel	./id_ex.v	/^           output reg [ `AluSelBus  ] ex_alusel,$/;"	p	module:id_ex
ex_alusel_i	./openmips.v	/^wire[ `AluSelBus ] ex_alusel_i;$/;"	n	module:openmips
ex_mem	./ex_mem.v	/^module ex_mem($/;"	m
ex_mem0	./openmips.v	/^ex_mem ex_mem0($/;"	i	module:openmips
ex_reg1	./id_ex.v	/^           output reg [ `RegBus     ] ex_reg1,$/;"	p	module:id_ex
ex_reg1_i	./openmips.v	/^wire[ `RegBus ] ex_reg1_i;$/;"	n	module:openmips
ex_reg2	./id_ex.v	/^           output reg [ `RegBus     ] ex_reg2,$/;"	p	module:id_ex
ex_reg2_i	./openmips.v	/^wire[ `RegBus ] ex_reg2_i;$/;"	n	module:openmips
ex_wd	./ex_mem.v	/^           input wire[ `RegAddrBus ] ex_wd,$/;"	p	module:ex_mem
ex_wd	./id_ex.v	/^           output reg [ `RegAddrBus ] ex_wd,$/;"	p	module:id_ex
ex_wd_i	./id.v	/^           input wire [ `RegAddrBus ] ex_wd_i,$/;"	p	module:id
ex_wd_i	./openmips.v	/^wire[ `RegAddrBus ] ex_wd_i;$/;"	n	module:openmips
ex_wd_o	./openmips.v	/^wire[ `RegAddrBus ] ex_wd_o;$/;"	n	module:openmips
ex_wdata	./ex_mem.v	/^           input wire[ `RegBus     ] ex_wdata,$/;"	p	module:ex_mem
ex_wdata_i	./id.v	/^           input wire [ `RegBus ] ex_wdata_i,$/;"	p	module:id
ex_wdata_o	./openmips.v	/^wire[ `RegBus ] ex_wdata_o;$/;"	n	module:openmips
ex_wreg	./ex_mem.v	/^           input wire                ex_wreg,$/;"	p	module:ex_mem
ex_wreg	./id_ex.v	/^           output reg                 ex_wreg$/;"	p	module:id_ex
ex_wreg_i	./id.v	/^           input wire ex_wreg_i ,          \/\/ 处于执行阶段的指令的运算结果$/;"	p	module:id
ex_wreg_i	./openmips.v	/^wire ex_wreg_i;$/;"	n	module:openmips
ex_wreg_o	./openmips.v	/^wire ex_wreg_o;$/;"	n	module:openmips
id	./id.v	/^module id ($/;"	m
id0	./openmips.v	/^id id0($/;"	i	module:openmips
id_aluop	./id_ex.v	/^           input wire [ `AluOpBus   ] id_aluop,$/;"	p	module:id_ex
id_aluop_o	./openmips.v	/^wire[ `AluOpBus ] id_aluop_o;$/;"	n	module:openmips
id_alusel	./id_ex.v	/^           input wire [ `AluSelBus  ] id_alusel,$/;"	p	module:id_ex
id_alusel_o	./openmips.v	/^wire[ `AluSelBus ] id_alusel_o;$/;"	n	module:openmips
id_ex	./id_ex.v	/^module id_ex ($/;"	m
id_ex0	./openmips.v	/^id_ex id_ex0($/;"	i	module:openmips
id_inst	./if_fd.v	/^           output reg [ `InstBus     ] id_inst$/;"	p	module:if_fd
id_inst_i	./openmips.v	/^wire[ `InstBus ] id_inst_i;$/;"	n	module:openmips
id_pc	./if_fd.v	/^           output reg [ `InstAddrBus ] id_pc,$/;"	p	module:if_fd
id_pc_i	./openmips.v	/^wire[ `InstAddrBus ] id_pc_i;$/;"	n	module:openmips
id_reg1	./id_ex.v	/^           input wire [ `RegBus     ] id_reg1,$/;"	p	module:id_ex
id_reg1_o	./openmips.v	/^wire[ `RegBus ] id_reg1_o;$/;"	n	module:openmips
id_reg2	./id_ex.v	/^           input wire [ `RegBus     ] id_reg2,$/;"	p	module:id_ex
id_reg2_o	./openmips.v	/^wire[ `RegBus ] id_reg2_o;$/;"	n	module:openmips
id_wd	./id_ex.v	/^           input wire [ `RegAddrBus ] id_wd,$/;"	p	module:id_ex
id_wd_o	./openmips.v	/^wire[ `RegAddrBus ] id_wd_o;$/;"	n	module:openmips
id_wreg	./id_ex.v	/^           input wire                 id_wreg,$/;"	p	module:id_ex
id_wreg_o	./openmips.v	/^wire id_wreg_o;$/;"	n	module:openmips
if_fd	./if_fd.v	/^module if_fd ($/;"	m
if_id0	./openmips.v	/^if_fd if_id0($/;"	i	module:openmips
if_inst	./if_fd.v	/^           input wire [ `InstBus     ] if_inst,$/;"	p	module:if_fd
if_pc	./if_fd.v	/^           input wire [ `InstAddrBus ] if_pc,$/;"	p	module:if_fd
imm	./id.v	/^reg [ `RegBus ] imm;$/;"	r	module:id
inst	./inst_rom.v	/^           output reg [ `InstBus ]  inst  $/;"	p	module:inst_rom
inst	./openmips_min_sopc.v	/^wire [ `InstBus ] inst;$/;"	n	module:openmips_min_sopc
inst_addr	./openmips_min_sopc.v	/^wire [ `InstAddrBus ] inst_addr;$/;"	n	module:openmips_min_sopc
inst_i	./id.v	/^           input wire [ `InstBus ] inst_i,$/;"	p	module:id
inst_mem	./inst_rom.v	/^reg [ `InstBus ] inst_mem [ 0: `InstMemNum - 1 ];$/;"	r	module:inst_rom
inst_rom	./inst_rom.v	/^module inst_rom($/;"	m
inst_rom0	./openmips_min_sopc.v	/^inst_rom inst_rom0($/;"	i	module:openmips_min_sopc
instvalid	./id.v	/^reg instvalid;$/;"	r	module:id
logicout	./ex.v	/^reg [ `RegBus ] logicout;$/;"	r	module:ex
mem	./mem.v	/^module mem($/;"	m
mem0	./openmips.v	/^mem mem0($/;"	i	module:openmips
mem_wb	./mem_wb.v	/^module mem_wb($/;"	m
mem_wb0	./openmips.v	/^mem_wb mem_wb0($/;"	i	module:openmips
mem_wd	./ex_mem.v	/^           output reg[ `RegAddrBus ] mem_wd,$/;"	p	module:ex_mem
mem_wd	./mem_wb.v	/^           input wire [ `RegAddrBus ] mem_wd,$/;"	p	module:mem_wb
mem_wd_i	./id.v	/^           input wire [ `RegAddrBus ] mem_wd_i$/;"	p	module:id
mem_wd_i	./openmips.v	/^wire[ `RegAddrBus ] mem_wd_i;$/;"	n	module:openmips
mem_wd_o	./openmips.v	/^wire[ `RegAddrBus ] mem_wd_o;$/;"	n	module:openmips
mem_wdata	./ex_mem.v	/^           output reg[ `RegBus     ] mem_wdata$/;"	p	module:ex_mem
mem_wdata	./mem_wb.v	/^           input wire [ `RegBus     ] mem_wdata,$/;"	p	module:mem_wb
mem_wdata_i	./id.v	/^           input wire [ `RegBus ] mem_wdata_i,$/;"	p	module:id
mem_wdata_i	./openmips.v	/^wire[ `RegBus ] mem_wdata_i;$/;"	n	module:openmips
mem_wdata_o	./openmips.v	/^wire[ `RegBus ] mem_wdata_o;$/;"	n	module:openmips
mem_wreg	./ex_mem.v	/^           output reg                mem_wreg,$/;"	p	module:ex_mem
mem_wreg	./mem_wb.v	/^           input wire                 mem_wreg,$/;"	p	module:mem_wb
mem_wreg_i	./id.v	/^           input wire mem_wreg_i,           \/\/ 处于访存阶段的指令的运算结果$/;"	p	module:id
mem_wreg_i	./openmips.v	/^wire mem_wreg_i;$/;"	n	module:openmips
mem_wreg_o	./openmips.v	/^wire mem_wreg_o;$/;"	n	module:openmips
op	./id.v	/^wire [ 5: 0 ] op = inst_i[ 31: 26 ];$/;"	n	module:id
op2	./id.v	/^wire [ 4: 0 ] op2 = inst_i[ 10: 6 ];$/;"	n	module:id
op3	./id.v	/^wire [ 5: 0 ] op3 = inst_i[ 5: 0 ];$/;"	n	module:id
op4	./id.v	/^wire [ 4: 0 ] op4 = inst_i[ 20: 16 ];$/;"	n	module:id
openmips	./openmips.v	/^module openmips ($/;"	m
openmips0	./openmips_min_sopc.v	/^openmips openmips0($/;"	i	module:openmips_min_sopc
openmips_min_sopc	./openmips_min_sopc.v	/^module openmips_min_sopc ($/;"	m
openmips_min_sopc0	./openmips_min_sopc_tb.v	/^openmips_min_sopc openmips_min_sopc0($/;"	i	module:openmips_min_sopc_tb
openmips_min_sopc_tb	./openmips_min_sopc_tb.v	/^module openmips_min_sopc_tb();$/;"	m
pc	./openmips.v	/^wire[ `InstAddrBus ] pc;$/;"	n	module:openmips
pc	./pc_reg.v	/^           output reg [ `InstAddrBus ] pc,  \/\/ 32位线宽$/;"	p	module:pc_reg
pc_i	./id.v	/^           input wire [ `InstAddrBus ] pc_i,$/;"	p	module:id
pc_reg	./pc_reg.v	/^module pc_reg ($/;"	m
pc_reg0	./openmips.v	/^pc_reg pc_reg0($/;"	i	module:openmips
raddr1	./regfile.v	/^           input wire [ `RegAddrBus ] raddr1,$/;"	p	module:regfile
raddr2	./regfile.v	/^           input wire [ `RegAddrBus ] raddr2,$/;"	p	module:regfile
rdata1	./regfile.v	/^           output reg [ `RegBus ] rdata1,$/;"	p	module:regfile
rdata2	./regfile.v	/^           output reg [ `RegBus ] rdata2$/;"	p	module:regfile
re1	./regfile.v	/^           input wire re1,$/;"	p	module:regfile
re2	./regfile.v	/^           input wire re2,$/;"	p	module:regfile
reg1_addr	./openmips.v	/^wire[ `RegAddrBus ] reg1_addr;$/;"	n	module:openmips
reg1_addr_o	./id.v	/^           output reg [ `RegAddrBus ] reg1_addr_o ,               \/\/ reg1中的读地址信号$/;"	p	module:id
reg1_data	./openmips.v	/^wire[ `RegBus ] reg1_data;$/;"	n	module:openmips
reg1_data_i	./id.v	/^           input wire [ `RegBus ] reg1_data_i,                \/\/ 从reg1中读出的输出$/;"	p	module:id
reg1_i	./ex.v	/^           input wire [ `RegBus ] reg1_i,$/;"	p	module:ex
reg1_o	./id.v	/^           output reg [ `RegBus ] reg1_o,$/;"	p	module:id
reg1_read	./openmips.v	/^wire reg1_read;$/;"	n	module:openmips
reg1_read_o	./id.v	/^           output reg reg1_read_o,                \/\/ 输出到reg1读使能信号$/;"	p	module:id
reg2_addr	./openmips.v	/^wire[ `RegAddrBus ] reg2_addr;$/;"	n	module:openmips
reg2_addr_o	./id.v	/^           output reg [ `RegAddrBus ] reg2_addr_o,                \/\/ reg2中的读地址信号$/;"	p	module:id
reg2_data	./openmips.v	/^wire[ `RegBus ] reg2_data;$/;"	n	module:openmips
reg2_data_i	./id.v	/^           input wire [ `RegBus ] reg2_data_i,                \/\/ 从reg2中读出的输出$/;"	p	module:id
reg2_i	./ex.v	/^           input wire [ `RegBus ] reg2_i,$/;"	p	module:ex
reg2_o	./id.v	/^           output reg [ `RegBus ] reg2_o,$/;"	p	module:id
reg2_read	./openmips.v	/^wire reg2_read;$/;"	n	module:openmips
reg2_read_o	./id.v	/^           output reg reg2_read_o,                \/\/ 输出到reg2读使能信号$/;"	p	module:id
regfile	./regfile.v	/^module regfile ($/;"	m
regfile1	./openmips.v	/^regfile regfile1($/;"	i	module:openmips
regs	./regfile.v	/^reg [ `RegBus ] regs [ 0: `RegNum - 1 ];$/;"	r	module:regfile
rom_addr_o	./openmips.v	/^           output wire [ `RegBus ] rom_addr_o,$/;"	p	module:openmips
rom_ce	./openmips.v	/^           output wire rom_ce$/;"	p	module:openmips
rom_ce	./openmips_min_sopc.v	/^wire rom_ce;$/;"	n	module:openmips_min_sopc
rom_data_i	./openmips.v	/^           input wire [ `RegBus ] rom_data_i,$/;"	p	module:openmips
rst	./ex.v	/^           input wire rst,$/;"	p	module:ex
rst	./ex_mem.v	/^           input wire rst,$/;"	p	module:ex_mem
rst	./id.v	/^           input wire rst,$/;"	p	module:id
rst	./id_ex.v	/^           input wire rst,$/;"	p	module:id_ex
rst	./if_fd.v	/^           input wire                  rst,$/;"	p	module:if_fd
rst	./mem.v	/^           input wire rst,$/;"	p	module:mem
rst	./mem_wb.v	/^           input wire rst,$/;"	p	module:mem_wb
rst	./openmips.v	/^           input wire rst,$/;"	p	module:openmips
rst	./openmips_min_sopc.v	/^           input wire rst$/;"	p	module:openmips_min_sopc
rst	./openmips_min_sopc_tb.v	/^reg rst;$/;"	r	module:openmips_min_sopc_tb
rst	./pc_reg.v	/^           input wire rst,$/;"	p	module:pc_reg
rst	./regfile.v	/^           input wire rst,$/;"	p	module:regfile
shiftres	./ex.v	/^reg [ `RegBus ] shiftres;$/;"	r	module:ex
waddr	./regfile.v	/^           input wire [ `RegAddrBus ] waddr,$/;"	p	module:regfile
wb_wd	./mem_wb.v	/^           output reg [ `RegAddrBus ] wb_wd,$/;"	p	module:mem_wb
wb_wd_i	./openmips.v	/^wire[ `RegAddrBus ] wb_wd_i;$/;"	n	module:openmips
wb_wdata	./mem_wb.v	/^           output reg [ `RegBus     ] wb_wdata$/;"	p	module:mem_wb
wb_wdata_i	./openmips.v	/^wire[ `RegBus ] wb_wdata_i;$/;"	n	module:openmips
wb_wreg	./mem_wb.v	/^           output reg                 wb_wreg,$/;"	p	module:mem_wb
wb_wreg_i	./openmips.v	/^wire wb_wreg_i;$/;"	n	module:openmips
wd_i	./ex.v	/^           input wire [ `RegAddrBus ] wd_i,$/;"	p	module:ex
wd_i	./mem.v	/^           input wire [ `RegAddrBus ] wd_i,$/;"	p	module:mem
wd_o	./ex.v	/^           output reg [ `RegAddrBus ] wd_o,$/;"	p	module:ex
wd_o	./id.v	/^           output reg [ `RegAddrBus ] wd_o,$/;"	p	module:id
wd_o	./mem.v	/^           output reg [ `RegAddrBus ] wd_o,$/;"	p	module:mem
wdata	./regfile.v	/^           input wire [ `RegBus ] wdata,$/;"	p	module:regfile
wdata_i	./mem.v	/^           input wire [ `RegBus     ] wdata_i,$/;"	p	module:mem
wdata_o	./ex.v	/^           output reg [ `RegBus ] wdata_o$/;"	p	module:ex
wdata_o	./mem.v	/^           output reg [ `RegBus     ] wdata_o$/;"	p	module:mem
we	./regfile.v	/^           input wire we,$/;"	p	module:regfile
wreg_i	./ex.v	/^           input wire wreg_i,$/;"	p	module:ex
wreg_i	./mem.v	/^           input wire                 wreg_i,$/;"	p	module:mem
wreg_o	./ex.v	/^           output reg wreg_o,$/;"	p	module:ex
wreg_o	./id.v	/^           output reg wreg_o,$/;"	p	module:id
wreg_o	./mem.v	/^           output reg                 wreg_o,$/;"	p	module:mem
